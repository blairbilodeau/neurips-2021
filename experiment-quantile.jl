using Plots
using LinearAlgebra
using ProgressBars
using FileIO
using Match
LinearAlgebra.BLAS.set_num_threads(6)
gr()
include("algorithms.jl")
include("hadamard_losses.jl")
output_path = "figures/"


function hadamard_exp(good_experts, replication_factors, algorithms)
    """
    Function replicating the experiments in the NormalHedge paper.
    Input:
        - good_experts: list containing the number of good experts to consider
            for each experiment
        - replication_factors: list containing all the replication factors to be
                used when generating Hadamard losses
        - algoritms: list containing all the algorithms to be run
    """

    K = length(replication_factors)
    save_file = output_path * "history/hadamard" * string(good_experts) * "_"
    experts_loss = hadamard_losses(good_experts)  # generate losses

    for j = 1:length(algorithms)

        # run every algorithm
        regret = zeros(K)
        results = Dict()
        algo = algorithms[j]

        # define loss parameters
        loss_params = Dict()
        rounds, tot_experts = size(experts_loss)
        loss_params["losses"] = experts_loss
        loss_params["rounds"] = rounds

        for i = 1:K
            rep_factor = replication_factors[i]
            loss_params["tot_experts"] = tot_experts * rep_factor
            loss_params["rep_factor"] = rep_factor

            # run algorithm and collect statistics
            algo_loss = running(algo, hadamard_loss, loss_params)
            regret[i] = sum(algo_loss) - minimum(sum(experts_loss, dims = 1))
            println(regret[i])
            # results are stored in a dictionary
            results[string(rep_factor)] = regret[i]
        end

        # save results
        if saving
            save(save_file * string(algo) * ".jld2", results)
        end
    end
end


function plot_results(algorithms, good_experts, legend)
    """
    Function plotting the result generated by running hadamard_exp(...).
    Input:
        - good_experts: list containing the number of good experts to consider
        for each experiment
        - algoritms: list containing all the algorithms to be plotted
        - legend: legend position
    """

    path = output_path * "history/hadamard" * string(good_experts) * "_"

    # initialize empty plot
    res_plot = plot(
        xaxis = :log,
        ylabel = string(good_experts) * "/126--Quantile Regret",
        xlabel = "Number of Experts",
        legend = legend,
    )

    # max and min scale for y axis
    mnm = 10e6
    mxm = 0

    for (ind, algo) in enumerate(algorithms)

        # retrieve data for each algorithm
        res_file = path * string(algo) * ".jld2"
        data = load(res_file)
        rep_factors = zeros(length(data))
        regret = zeros(length(data))

        for (ind, tup) in enumerate(data)
            # results are stored in a dictionary
            # where the key is the replication factor
            key, value = tup
            rep_factors[ind] = parse(Int, key)
            regret[ind] = value
        end

        perm = sortperm(rep_factors)
        # update plot with current algorithm's result
        plot!(
            126 * rep_factors[perm],
            regret[perm],
            linestyle = :solid,
            color = COLORS[ind],
            markershape = SHAPES[ind],
            linewidth = 2,
            markersize = 6,
            label = algo_namer(algo),
        )

        # update max and min
        mnm = min(minimum(regret), mnm)
        mxm = max(maximum(regret), mxm)
    end

    # set limits on y axis and save figures
    ylims!(0, mxm + 50)
    savefig(res_plot, output_path * "hadamard" * string(good_experts) * ".png")
    savefig(res_plot, output_path * "hadamard" * string(good_experts) * ".pdf")

end

algo_namer(algo) = @match string(algo) begin
    "coinBetting" => "CoinBetting"
    "hedge" => "Hedge"
    "normalHedge" => "NormalHedge"
    "abnormal" => "abNormal*"
    "squint" => "Squint"
    "adaHedge" => "adaHedge"
    _ => "Nothing"
end


# algo hyperparams
C_HEDGE = sqrt(8)

# experiment
saving = true
multi_threading = false
replication_factors = [1, 5, 20, 50, 100, 1000]
GOOD_EXP = [16, 32]
COLORS =
    [:black, :dodgerblue, :darkgoldenrod3, :darkorchid3, :red, :green, :orange, :yellow]
SHAPES = [:circle, :rect, :star5, :diamond, :hexagon, :utriangle, :dtriangle, :rtriangle]
algorithms = [coinBetting, hedge, normalHedge, abnormal, squint, adaHedge]

# run algorithms
if multi_threading
    Threads.@threads for good_exp in GOOD_EXP
        hadamard_exp(good_exp, replication_factors, algorithms)
    end
else
    for good_exp in GOOD_EXP
        hadamard_exp(good_exp, replication_factors, algorithms)
    end
end

# plot results
for good_exp in GOOD_EXP
    legend = :none
    if good_exp == 16
        legend = :bottomleft
    end
    plot_results(algorithms, good_exp, legend)
end
